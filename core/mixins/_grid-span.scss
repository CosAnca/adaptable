@charset "UTF-8";
/// Spans an element across the width of specified columns.
///
/// @group features
///
/// @name Grid span
///
/// @argument {number (unitless)} $columns [null]
///   Specifies the number of columns an element should span based on the total
///   columns of the grid.
///
///   This can also be defined in a shorthand syntaxt which also contains the
///   total column count such as `3 of 5`.
///
/// @argument {map} $grid [$adaptable-grid]
///   The grid to be used to generate the column.
///   By default, the global `$adaptable-grid` will be used.
///
/// @example scss
///
///   .element {
///     @include grid-span(3);
///   }
///
/// @example css
///
///   .element {
///     flex: 0 0 calc(25% - 30px);
///     max-width: calc(25% - 30px);
///   }
///

@mixin grid-span($columns: null, $grid: $adaptable-grid) {
  $columns: _adaptable-column-default($grid, $columns);

  flex-grow: 0;
  flex-shrink: 0;
  flex-basis: calc(#{_adaptable-column-width($grid, $columns)});
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: calc(#{_adaptable-column-width($grid, $columns)});
}
