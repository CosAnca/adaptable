@charset "UTF-8";
/// Push or pull a grid column by manipulating its left margin.
///
/// @group features
///
/// @name Grid push
///
/// @argument {number (unitless)} $push [false]
///   The number of columns to push the column.
///
/// @argument {map} $grid [$adaptable-grid]
///   The grid to be used to determine how far to push the column.
///   By default, the global `$adaptable-grid` will be used.
///
/// @example scss
///
///   .element {
///     @include grid-push(3);
///   }
///
/// @example css
///
///   .element {
///     margin-left: calc(25% - 30px + 48px);
///   }
///

@mixin grid-push($push: false, $grid: $adaptable-grid) {
  $_grid-columns: _retrieve-adaptable-setting($grid, columns);
  $_grid-gutter: _retrieve-adaptable-setting($grid, gutter);

  @if $push {
    $_gutter-affordance: ($_grid-gutter * 2) - ($_grid-gutter / 2);
    $_margin-value: calc(#{_adaptable-column-width($grid, $push)} + #{$_gutter-affordance});

    margin-#{_adaptable-layout-direction($grid)}: $_margin-value;
  } @else {
    $_margin-value: _retrieve-adaptable-setting($grid, gutter);

    margin-#{_adaptable-layout-direction($grid)}: $_margin-value;
  }
}
