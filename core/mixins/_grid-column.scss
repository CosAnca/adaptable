@charset "UTF-8";

@use "sass:list";
@use "sass:math";
@use "../functions/adaptable-column-default";
@use "../functions/adaptable-column-width";
@use "../functions/retrieve-adaptable-settings";
@use "../settings/settings";

/// Creates a grid column of requested size.
///
/// @group features
///
/// @name Grid column
///
/// @argument {number (unitless)} $columns [null]
///   Specifies the number of columns an element should span based on the total
///   columns of the grid.
///
///   This can also be defined in a shorthand syntaxt which also contains the
///   total column count such as `3 of 5`.
///
/// @argument {map} $grid [$adaptable-grid]
///   The grid to be used to generate the column.
///   By default, the global `$adaptable-grid` will be used.
///
/// @example scss
///
///   .element {
///     @include grid-column(3);
///   }
///
/// @example css
///
///   .element {
///     flex-shrink: 0;
///     width: calc(25% - 1.5rem);
///     max-width: calc(100% - 1.5rem);
///     margin-top: 1.5rem;
///     margin-right: 0.75rem;
///     margin-left: 0.75rem;
///   }
///

@mixin grid-column($columns: null, $grid: settings.$adaptable-grid) {
  $columns: adaptable-column-default.adaptable-column-default($grid, $columns);
  $_mode: retrieve-adaptable-settings.retrieve-adaptable-setting($grid, mode);
  $_grid-column-gap: retrieve-adaptable-settings.retrieve-adaptable-setting(
    $grid,
    column-gap
  );
  $_grid-row-gap: retrieve-adaptable-settings.retrieve-adaptable-setting(
    $grid,
    row-gap
  );

  @if ($_mode and $_mode == "flex") {
    flex-shrink: 0;
    width: calc(
      #{adaptable-column-width.adaptable-column-width($grid, $columns)}
    );
    max-width: if(
      $_grid-column-gap == 0,
      100%,
      calc(100% - #{$_grid-column-gap})
    );
    margin-top: $_grid-row-gap;
    margin-right: math.div($_grid-column-gap, 2);
    margin-left: math.div($_grid-column-gap, 2);
  } @else {
    grid-column-end: span list.nth($columns, 1);
  }
}
